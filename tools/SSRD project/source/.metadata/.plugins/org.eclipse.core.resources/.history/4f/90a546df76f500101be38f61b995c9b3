package net.SubSpace.SSDR.Main;

import java.awt.AWTException;
import java.awt.CheckboxMenuItem;
import java.awt.List;
import java.awt.Menu;
import java.awt.MenuItem;
import java.awt.TrayIcon;
import java.awt.TrayIcon.MessageType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Scanner;

import javax.swing.JOptionPane;

public class ThreadMenu implements Runnable{

	static MenuItem ZoneList[] = new MenuItem[512];
	static ArrayList<MenuItem> listZone = new ArrayList<MenuItem>();
    static Menu ZoneListMenu = new Menu("Check Zone");
    static String[] ZoneListNames = new String[1024];
	@Override
	public void run() {
		registerNames();
	}
	
	public void registerNames()
	{
		File file = new File(System.getenv("APPDATA") + "/SSDR/AppData/ZoneList.txt");
		  try{
			  // Open the file that is the first 
			  // command line parameter
			  FileInputStream fstream = new FileInputStream(file);
			  String parentDirName = file.getParent();
			  System.out.println(parentDirName);
			  // Get the object of DataInputStream
			  DataInputStream in = new DataInputStream(fstream);
			  BufferedReader br = new BufferedReader(new InputStreamReader(in));
			  String strLine;
			  //Read File Line By Line
			  while ((strLine = br.readLine()) != null)   {
			  // Print the content on the console
			  System.out.println (strLine);
			  }
			  //Close the input stream
			  in.close();
			    }catch (Exception e){//Catch exception if any
			  System.err.println("Error: " + e.getMessage());
			  }
	}

    public static void initializeMenu()
    {
    	for(int j = 0; j < SSDR.ZoneName.length;j++)
    	{
    		if(SSDR.ZoneName[j] != null)
    		{
    			ZoneList[j] = new MenuItem(SSDR.ZoneName[j]);    			
    		}
    	}
        MenuItem aboutItem = new MenuItem("About");
        //MenuItem update = new MenuItem("Update App");
        MenuItem errorItem = new MenuItem("Error");
        MenuItem warningItem = new MenuItem("Warning");
        MenuItem infoItem = new MenuItem("Info");
        MenuItem noneItem = new MenuItem("None");
        MenuItem exitItem = new MenuItem("Exit");
        CheckboxMenuItem toggleUpdates = new CheckboxMenuItem("Toggle Updating");
        
        //Add components to popup menu
        ThreadIcon.popup.add(aboutItem);
        ThreadIcon.popup.add(toggleUpdates);
        ThreadIcon.popup.addSeparator();
        //ThreadIcon.popup.add(update);
        ThreadIcon.popup.addSeparator();
        ThreadIcon.popup.add(ZoneListMenu);
        //Add to menu
        
        for(int j = 0; j < ZoneList.length;j++)
        {
        	if(ZoneList[j] != null)
        	{        		
        		ZoneListMenu.add(ZoneList[j]);
        	}
        	if(ZoneList[j] != null)
        	{
        		final int b = j;
        		ZoneList[j].addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                    	if(ThreadCheckForUpdates.currentCheckedZone.isInterrupted() || !ThreadCheckForUpdates.currentCheckedZone.isAlive() || ThreadCheck.kill || ThreadCheckForUpdates.currentCheckedZone == null)
						{							
                    		ThreadCheckForUpdates.currentCheckedZone = new Thread(new ThreadCheck(SSDR.ZoneName[b],SSDR.ZoneIP[b], 39943, true), SSDR.ZoneName[b] + "'s Downloading Thread");
                    		ThreadCheckForUpdates.currentCheckedZone.start();
						}
                    	
                    }
                });
        	}
        }
      /*  ZoneListMenu.add(errorItem);
        ZoneListMenu.add(warningItem);
        ZoneListMenu.add(infoItem);
        ZoneListMenu.add(noneItem); */
        ThreadIcon.popup.add(exitItem);
        
        ThreadIcon.trayIcon.setPopupMenu(ThreadIcon.popup);
        
        try {
        	ThreadIcon.tray.add(ThreadIcon.trayIcon);
        } catch (AWTException e) {
            System.out.println("TrayIcon could not be added.");
            return;
        }
        
        toggleUpdates.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent e) {
                int cb1Id = e.getStateChange();
                if (cb1Id == ItemEvent.SELECTED){
                	if(!ThreadCheckForUpdates.runChecks == true)
                	{                		
                		ThreadCheckForUpdates.runChecks = true;
                		SSDR.threadCheckForUpdates = (new Thread(new ThreadCheckForUpdates(),"Updating Thread"));
                		SSDR.threadCheckForUpdates.start();
                	}
                } else {
                	ThreadCheckForUpdates.runChecks = false;
                }
            }
        });
        ThreadIcon.trayIcon.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                
            	//IF CLICKED TWICE.
            	
            	//JOptionPane.showMessageDialog(null,"This dialog box is run from System Tray");
            }
        });
        
        aboutItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                JOptionPane.showMessageDialog(null,
                        "This is a Application that supports unlimited downloading speeds for SubSpace files. Made by JabJabJab");
            }
        });
        
       /* update.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            	Messaging.displayMessage("SSDR", "Checking for Application Updates...", Messaging.Info);
            	
            }
        }); */
        

        
        ActionListener listener = new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                MenuItem item = (MenuItem)e.getSource();
                //TrayIcon.MessageType type = null;
                System.out.println(item.getLabel());
                if ("Error".equals(item.getLabel())) {
                    //type = TrayIcon.MessageType.ERROR;
                	ThreadIcon.trayIcon.displayMessage("Sun TrayIcon Demo",
                            "This is an error message", TrayIcon.MessageType.ERROR);
                    
                } else if ("Warning".equals(item.getLabel())) {
                    //type = TrayIcon.MessageType.WARNING;
                	ThreadIcon.trayIcon.displayMessage("Sun TrayIcon Demo",
                            "This is a warning message", TrayIcon.MessageType.WARNING);
                    
                } else if ("Info".equals(item.getLabel())) {
                    //type = TrayIcon.MessageType.INFO;
                	ThreadIcon.trayIcon.displayMessage("Sun TrayIcon Demo",
                            "This is an info message", TrayIcon.MessageType.INFO);
                    
                } else if ("None".equals(item.getLabel())) {
                    //type = TrayIcon.MessageType.NONE;
                	ThreadIcon.trayIcon.displayMessage("Sun TrayIcon Demo",
                            "This is an ordinary message", TrayIcon.MessageType.NONE);
                }
            }
        };
        
        errorItem.addActionListener(listener);
        warningItem.addActionListener(listener);
        infoItem.addActionListener(listener);
        noneItem.addActionListener(listener);
        
        exitItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            	ThreadIcon.tray.remove(ThreadIcon.trayIcon);
                System.exit(0);
            }
        });
    }
}
